swagger: '2.0'
info:
  version: '1.0'
  title: Basic-auth service API
  description: >
    The basic-auth service provides a REST API to manage HTTP
    Basic-Authentication credentials.


    Requests must be performed with `Content-Type: application/json;
    version=1.0`; if the request requires a payload, it must be in JSON format.


    Requests to the service must be authenticated with Basic-Autentication, for
    example:


    ```

    POST http://<user>:<password>@<hostname>/api/credentials/

    {"user": "a-user"}

    ```
host: esm.ubuntu.com
basePath: /api
tags:
  - name: credentials
    description: Basic-auth credentials
schemes:
  - http
paths:
  /credentials:
    post:
      tags:
        - credentials
      summary: Create basic-auth credentials for a user
      description: >
        Create basic-auth user and password for a user.


        The `token` field in the request body is optional; if provided it must
        be in the form `username:password`, otherwise it's automatically
        generated and included in the response.
      operationId: addCredentials
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User credentials
          required: true
          schema:
            $ref: '#/definitions/CreateCredentials'
      responses:
        '201':
          description: User credentials created
          schema:
            $ref: '#/definitions/Credentials'
        '400':
          description: Invalid user specification
          schema:
            $ref: '#/definitions/APIError'
        '409':
          description: User with specified ID already exists
          schema:
            $ref: '#/definitions/APIError'
  '/credentials/{userId}':
    get:
      tags:
        - credentials
      summary: Return credentials for a user
      description: Return current basic-auth credentials for a user
      operationId: getCredentials
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of the user whose credentials to return
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Credentials'
        '404':
          description: User with specified ID not found
          schema:
            $ref: '#/definitions/APIError'
    put:
      tags:
        - credentials
      summary: Update or generate new credentials for a user
      description: >
        Update or generate new credentials for an existing user.


        The `token` field in the request body is optional; if provided it must
        be in the form `username:password`, otherwise it's automatically
        generated and included in the response. 
      operationId: updateCredentials
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of the user to udpate credentials for
          required: true
          type: string
        - name: body
          in: body
          description: Optional user credentials
          required: true
          schema:
            $ref: '#/definitions/UpdateCredentials'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Credentials'
        '404':
          description: User with specified ID not found
          schema:
            $ref: '#/definitions/APIError'
    delete:
      tags:
        - credentials
      summary: Deletes credentials for a user
      description: Delete basic-auth credentials for a user
      operationId: deleteCredentials
      parameters:
        - name: userId
          in: path
          description: ID of the user to delete
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/EmptyResponse'
        '404':
          description: User with specified ID not found
          schema:
            $ref: '#/definitions/APIError'
definitions:
  Credentials:
    type: object
    properties:
      user:
        type: string
        description: The user identifier
      token:
        type: string
        description: 'Optional user token in the "<username>:<password>" form'
    example:
      user: a-user
      token: 'foo:bar'
  CreateCredentials:
    type: object
    properties:
      user:
        type: string
        description: The user identifier
      token:
        type: string
        description: 'Optional user token in the "<username>:<password>" form'
    example:
      user: a-user
      token: 'foo:bar'
  UpdateCredentials:
    type: object
    properties:
      token:
        type: string
        description: 'Optional user token in the "<username>:<password>" form'
    example:
      token: 'foo:bar'
  EmptyResponse:
    type: object
  APIError:
    type: object
    properties:
      code:
        type: string
        description: Text form of the HTTP error
      message:
        type: string
        description: Extended error message
